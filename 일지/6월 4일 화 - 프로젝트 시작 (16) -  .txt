6월 4일 화 → ※ ▶ ◈ ∴ 🫡 ❤ …

▶ 일단은 첫 시간으로 CCTVStream 클래스에 대해서 정리를 해보도록 하자!

CCTVStream 클래스는 Flask 애플리케이션에서 YOLO 객체 검출 모델을 사용하여 CCTV 영상 스트림을 처리하는 역할을 합니다. 이 클래스의 구성 요소와 기능을 자세히 분석해 보겠습니다.

초기화 (__init__ 메서드)
URL: 클래스는 영상 스트림의 URL을 입력으로 받습니다.
모델: 지정된 경로(./model_train/runs/detect/train/weights/best.pt)에서 YOLO 모델을 로드합니다.
라벨: label.txt 파일에서 라벨을 읽어와 리스트에 저장합니다.
검출 카운터: 연속 검출 횟수와 결과 출력 플래그를 초기화합니다.
... 코드_:
프레임 생성 (generate_frames 메서드)
이 메서드는 영상 스트림을 열고, YOLO 모델을 사용하여 객체를 검출하며, 결과를 프레임에 그려 출력합니다.

카메라 열기: 지정된 URL에서 영상 스트림을 엽니다.
FPS 설정: FPS(초당 프레임 수)를 가져옵니다.
출력 디렉토리 설정: 결과 영상을 저장할 디렉토리를 생성합니다.
비디오 라이터 설정: 출력 영상을 저장하기 위한 VideoWriter 객체를 설정합니다.
프레임 처리: 각 프레임을 읽어와 크기를 조정하고 YOLO 모델로 검출을 수행합니다.
검출 결과 처리: 객체가 검출되면 연속 검출 횟수를 증가시키고, 일정 횟수 이상 연속 검출 시 결과를 데이터베이스에 저장합니다.
프레임 인코딩: 검출 결과가 그려진 프레임을 JPEG 형식으로 인코딩하여 출력합니다.
... 코드_:
타이머 시작 (start_timer 메서드)
타이머 쓰레드 시작: 검출 결과가 일정 시간 후에 초기화되도록 타이머 쓰레드를 시작합니다.
... 코드_:
검출 결과 초기화 (reset_printed_detection 메서드)
초기화: 1분 후에 검출 결과 출력 플래그를 초기화합니다.
... 코드_:
검출 결과 예측 (predict_results 메서드)
라벨 추출: 검출된 객체의 라벨을 추출하여 리스트에 저장합니다.
날짜와 시간 설정: 현재 날짜와 검출 시간을 포맷팅하여 저장합니다.
... 코드_:
결과를 데이터베이스에 저장 (results_to_database 메서드)
데이터베이스 연결: SQLite 데이터베이스에 연결합니다.
결과 삽입: 검출 결과를 데이터베이스의 cctvlog 테이블에 삽입합니다.
... 코드_:
요약
이 클래스는 CCTV 영상 스트림을 열고, 프레임을 읽어 YOLO 모델로 객체를 검출하며, 검출 결과를 프레임에 그려 출력하고, 일정 조건을 만족할 때 검출 정보를 데이터베이스에 저장하는 기능을 구현합니다.

---- 2교시_)
로그 데이터를 <a href= ...>에서 링크를 클릭하면 검출된 부분과 시간이 영상으로 출력되도록 설정하고 싶다.

▶ index_frame.html 파일을 사용하여 로그 데이터를 동적으로 표시하고, 각 로그 항목을 클릭하면 검출된 시간과 영상을 볼 수 있도록 설정하려면, Flask 서버를 설정하고 클릭된 항목에 대한 세부 정보를 표시하는 템플릿을 추가해야 합니다. 이를 위해 다음과 같이 구현할 수 있습니다.

1. Flask 서버 설정
먼저, Flask 서버를 설정하여 데이터베이스에서 로그 데이터를 가져오고 이를 웹 페이지에 표시하도록 합니다.
... 코드_:
2. index_frame.html 파일 수정
index_frame.html 파일을 수정하여 로그 데이터를 표시하고, 각 로그 항목을 클릭하면 세부 정보를 볼 수 있도록 링크를 추가합니다.
... 코드_:
3. view_log.html 파일 생성
view_log.html 파일을 생성하여 검출된 시간에 맞춰 동영상을 재생하도록 합니다.
... 코드_:

요약
Flask 서버: 서버를 설정하여 데이터베이스에서 로그 데이터를 가져오고, /view_log 엔드포인트를 통해 세부 정보를 표시합니다.
index_frame.html: 로그 데이터를 동적으로 표시하고, 각 로그 항목에 링크를 추가하여 세부 정보를 볼 수 있도록 합니다.
view_log.html: 동영상 플레이어를 설정하여 클릭된 로그의 검출 시간으로 이동하여 재생을 시작합니다.
이 설정을 통해 로그 데이터를 쉽게 조회하고, 클릭하여 검출된 부분의 영상을 확인할 수 있습니다.

---- 3교시_)
특정 날짜의 로그 페이지를 렌더링하는 기능이 이미 구현되어 있는 상황을 고려하여, 새로운 로그 데이터를 데이터베이스에 저장하고 이를 특정 날짜에 따라 조회할 수 있도록 app.py를 수정하고, 관련 HTML 파일들을 작성해보겠습니다.

1. Flask 애플리케이션 설정 (app.py)
이미 있는 라우트와 통합하여 새로운 기능을 추가합니다.
... 코드_:
2. view_log.html 수정
총 4개의 동영상을 표시하고, 각각의 동영상에서 특정 시간부터 재생을 시작하도록 설정합니다.
... 코드_:

요약)) 
Flask 애플리케이션: 기존 라우트를 사용하여 특정 날짜의 로그를 조회하고, 각 로그에 대해 4개의 동영상을 동적으로 표시하도록 수정합니다.
view_log.html: 총 4개의 동영상을 표시하고, 각각의 동영상에서 특정 시간부터 재생을 시작하도록 설정합니다.
이 설정을 통해 사용자는 특정 날짜의 로그 데이터를 쉽게 조회하고, 클릭하여 4개의 관련된 영상을 동시에 확인할 수 있습니다.

---- 4교시_)
이미 app.py에 class CCTVStream에서 DB에 저장되도록 설정이 되어있다.
그런데 위에서 수정한 app.py와 같이 수정하는게 과연 올바른걸까요?

구성되어있는 class CCTVStream의 내용을 참고해서 app.py를 어떻게 수정할지 방법을 알려주시길 바랍니다.


알겠습니다. CCTVStream 클래스가 이미 데이터베이스에 로그를 저장하도록 설정되어 있는 상황을 고려하여, 해당 클래스를 사용하는 방법을 유지하면서 app.py를 수정하겠습니다. 기본적인 로그 저장 및 렌더링 기능을 포함하여 CCTVStream 클래스와의 통합을 구현하겠습니다.

1. CCTVStream 클래스 참고
우선, CCTVStream 클래스가 데이터베이스에 로그를 저장하는 부분을 복습합니다.
... 코드_:
2. app.py 수정
이제 CCTVStream 클래스와 연동하여 Flask 애플리케이션을 구성합니다. 특정 날짜의 로그를 조회하고, 각 로그에 대해 여러 개의 동영상을 렌더링하도록 설정하겠습니다.
... 코드_:
3. view_log.html 파일 수정
4개의 동영상을 표시하고, 각각의 동영상에서 특정 시간부터 재생을 시작하도록 설정합니다.
... 코드_:

요약))
Flask 애플리케이션: CCTVStream 클래스와의 통합을 유지하면서 로그 데이터를 조회하고, 여러 동영상을 렌더링하는 기능을 추가합니다.
view_log.html: 총 4개의 동영상을 표시하고, 각각의 동영상에서 특정 시간부터 재생을 시작하도록 설정합니다.
이 설정을 통해 사용자는 특정 날짜의 로그 데이터를 쉽게 조회하고, 클릭하여 4개의 관련된 영상을 동시에 확인할 수 있습니다.














































































































