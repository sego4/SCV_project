5월 28일 화 → ※ ▶ ◈ ∴ 🫡 ❤ …

-----------------------------------------------------------------
>> 위 코드는 웹 페이지의 스타일을 정의하는 CSS (Cascading Style Sheets) 파일입니다. 각 요소의 배치, 색상, 크기 등을 설정하여 웹 페이지의 외관을 구성합니다. 이 코드는 주로 레이아웃과 디자인에 초점을 맞추고 있습니다. 아래는 주요 부분과 해당 개념에 대한 설명입니다.

각 섹션별로 레이아웃, 배경, 글꼴 색상 및 크기 등을 정의하여 사용자 경험을 향상시키는 역할을 합니다.


▶ predict.py_: 이 코드는 YOLO 모델을 사용하여 비디오에서 객체를 탐지하고, 
결과를 새로운 비디오 파일로 저장하는 프로그램입니다. 

주요 부분들을 설명하면 다음과 같습니다:

>클래스 초기화 (__init__)
 1. 모델 로드: YOLO('./model_train/runs/detect/train/weights/best.pt')는 사전 훈련된 YOLO 모델을 지정된 경로에서 로드합니다.
 2. 이미지 크기: self.size = (960, 540)는 비디오 프레임을 처리할 때 사용할 크기를 설정합니다.
 3. 레이블 목록: 주석 처리된 코드 부분에서는 레이블 목록을 파일에서 읽어오도록 되어 있지만, 현재 사용되지 않습니다.

… 코드:
???_: 모델 로드: YOLO('./model_train/runs/detect/train/weights/best.pt')는 사전 훈련된 YOLO 모델을 지정된 경로에서 로드에 대한 정보를 자세히 알고 싶습니다.

> 객체 탐지 (detect_objects)
 1. 비디오 캡처: cv2.VideoCapture(video_path)는 지정된 경로의 비디오 파일을 열거나 카메라를 사용합니다.
 2. FPS 추출: 비디오 파일의 프레임 속도를 가져옵니다.
 3.결과 저장 경로 설정: 현재 날짜를 기준으로 결과 비디오 파일의 이름을 설정하고, 저장할 디렉토리를 생성합니다.
 4. 비디오 라이터 설정: 결과 비디오 파일을 저장할 cv2.VideoWriter 객체를 초기화합니다.
 5. 프레임 처리 루프:
    - 비디오 파일이 열려 있는 동안, 프레임을 읽고 리사이즈합니다.
    - YOLO 모델을 사용하여 객체를 탐지하고, 탐지 결과를 그립니다.
    - 그린 결과를 비디오 파일에 작성합니다.
 6. 리소스 해제: 비디오 캡처 및 라이터 객체를 해제합니다.

… 코드:

※ 사용 예 )) 
코드의 마지막 부분에서는 Predict 클래스의 인스턴스를 생성하고, 비디오 파일 경로를 지정하여 객체 탐지를 수행한 후 결과 경로를 출력합니다.

… 코드:

"요약"
이 프로그램은 비디오 파일에서 객체를 탐지하여 결과를 새로운 비디오 파일로 저장합니다.
 이를 위해 YOLO 모델을 사용하고, OpenCV를 통해 비디오 프레임을 처리하며, 탐지된 객체를 그린 후 결과를 저장합니다.


>> 모델 로드 부분에 대한 자세한 설명은 다음과 같습니다:

※ YOLO 모델 로드
YOLO('./model_train/runs/detect/train/weights/best.pt')는 ultralytics 라이브러리를 사용하여 지정된 경로에서 YOLO 모델을 로드하는 코드입니다. 여기서 사용된 YOLO는 최신 YOLOv5 또는 YOLOv8과 같은 Ultralytics에서 제공하는 객체 탐지 모델을 의미합니다. 이 모델은 사전 훈련된 모델을 사용하거나 사용자가 직접 학습시킨 모델을 사용할 수 있습니다.

> 세부 사항
 1. YOLO 라이브러리:
ultralytics 라이브러리는 YOLO 모델을 쉽게 사용할 수 있도록 만든 라이브러리입니다. 이 라이브러리를 통해 모델 로드, 학습, 평가 및 추론을 간단히 수행할 수 있습니다.

 2. 모델 경로:
'./model_train/runs/detect/train/weights/best.pt'는 모델 가중치 파일의 경로입니다. 이 파일은 모델이 학습된 후 저장된 가중치 파일입니다. 경로는 상대 경로 또는 절대 경로로 지정할 수 있습니다.

 3. 가중치 파일 (best.pt):
이 파일은 모델 학습 과정에서 가장 성능이 좋은 상태의 가중치를 저장한 파일입니다. 일반적으로 모델 학습 후 저장된 파일로, 모델이 학습 데이터에서 좋은 성능을 보였을 때 저장됩니다.

>> 코드 설명
...
이 코드는 self.model이라는 인스턴스 변수에 YOLO 모델을 로드합니다. YOLO 클래스의 생성자에 가중치 파일의 경로를 전달하여 모델을 초기화합니다. 이 모델은 이후에 객체 탐지 작업에 사용됩니다.

※ Ultralytics YOLO 사용 예제
Ultralytics 라이브러리를 사용하여 YOLO 모델을 로드하고 사용하는 일반적인 예제는 다음과 같습니다:
... 코드:

>>모델 가중치 파일 준비
모델 가중치 파일(best.pt)은 두 가지 방법으로 준비할 수 있습니다:

 1. 사전 훈련된 모델 사용:
사전 훈련된 YOLO 모델 가중치를 사용합니다. Ultralytics에서는 여러 사전 훈련된 모델을 제공합니다. 예를 들어, YOLOv5의 경우 다음과 같이 사용할 수 있습니다:

python
코드 복사
model = YOLO('yolov5s.pt')  # yolov5s 사전 훈련된 모델 로드
 2. 사용자 학습 모델 사용:
사용자 데이터로 모델을 학습시키고 저장한 가중치 파일을 사용합니다. 학습 과정은 다음과 같습니다:

python
코드 복사
from ultralytics import YOLO

model = YOLO('yolov5s.pt')  # 사전 훈련된 모델 로드
model.train(data='path/to/your/data.yaml', epochs=50)  # 사용자 데이터로 모델 학습
model.save('path/to/save/best.pt')  # 학습된 모델 가중치 저장
이후 학습된 모델 가중치 파일을 로드하여 사용할 수 있습니다.

> 결론
모델 로드 부분은 객체 탐지 작업에서 중요한 첫 단계입니다. 올바르게 로드된 모델은 이후의 탐지 작업에서 높은 성능을 발휘할 수 있습니다. Ultralytics 라이브러리를 사용하면 모델 로드, 학습, 추론 등을 쉽게 수행할 수 있습니다.

---- 4교시
> 모델 경로를 통해 
'./model_train/runs/detect/train/weights/best.pt'의 상대 경로라고 할 수 있을까?
모델 가중치 파일의 경로라고 한다.
답변_: 이 경로는 현재 작업 디렉토리(current working directory)를 기준으로 한 경로를 의미하게 된다.

>여기서 가중치 파일 best.pt 를 사용해서 cctv_frame.html에 띄우면 main은 해결되는게 아닐까?
답변_:
네, best.pt 가중치 파일을 사용해서 cctv_frame.html에 띄우는 것은 객체 검출의 한 예라고 할 수 있습니다. 
구체적으로 설명하자면, 객체 검출 과정은 다음과 같은 단계들을 포함합니다:

 1. 모델 로드: 사전 훈련된 또는 사용자 정의로 학습된 YOLO 모델과 가중치 파일(best.pt)을 로드합니다.
 2. 영상 프레임 캡처: 비디오 스트림(CCTV 피드 등)에서 프레임을 캡처합니다.
 3. 객체 검출 수행: 로드된 모델을 사용하여 각 프레임에서 객체를 검출합니다.
 4. 결과 시각화: 검출된 객체를 표시하고, 이를 웹 페이지(cctv_frame.html)에 띄웁니다.

이 과정에서 best.pt 파일은 중요한 역할을 하며, 이는 모델이 객체를 올바르게 인식하고 검출할 수 있도록 돕는 가중치 정보를 포함합니다.

>예시 코드 흐름
1. YOLO 모델 로드
... 코드:

2. 비디오 프레임 캡처 및 객체 검출
... 코드:

3. 웹 페이지에 결과 표시 ('cctv_frame.html')
 프레임에서 검출된 객체를 웹 페이지에 실시간으로 표시하려면, 서버 측에서 해당 프레임을 스트리밍하거나 주기적으로 갱신하도록 설정할 수 있습니다. 이를 위해 Flask와 같은 웹 프레임워크를 사용할 수 있습니다.


---- 5교시
predict.py 파일
이 파일은 YOLO 모델을 사용하여 객체를 검출하고 결과를 비디오 파일로 저장하는 클래스를 정의합니다.
...코드:

수정된 app.py 파일
이제 predict.py 파일에서 정의한 Predict 클래스를 사용하여 실시간 객체 검출 기능을 추가하도록 하겠습니다.
...코드:
이 수정된 app.py 파일에서는 predict.py 파일에서 정의한 Predict 클래스를 사용하여 객체 검출을 수행합니다. 실시간 객체 검출 결과는 /cctv_frame 경로를 통해 스트리밍됩니다.

cctv_frame.html 파일
...코드:
이제 Flask 애플리케이션을 실행하고 브라우저에서 http://localhost:5000/cctv_frame로 접속하면, 실시간으로 객체 검출 결과를 확인할 수 있습니다.

>> 오류발생 [ERROR:0@6.640] global obsensor_uvc_stream_channel.cpp:159 cv::obsensor::getStreamChannelGroup Camera index out of range

이 오류는 OpenCV에서 카메라 인덱스가 범위를 벗어났음을 나타냅니다. 일반적으로 이 오류는 카메라를 열려고 시도했을 때 발생합니다. 오류 메시지를 보면 Camera index out of range라고 되어 있으므로, 카메라 인덱스가 잘못 설정되었을 가능성이 있습니다.

일반적으로 VideoCapture() 함수를 사용하여 카메라를 열 때 카메라 인덱스를 지정합니다. 대부분의 경우 기본 카메라의 인덱스는 0이며, 추가된 카메라는 1, 2, 3 등의 순차적으로 증가합니다. 따라서 카메라를 열 때 올바른 인덱스를 지정하는지 확인해야 합니다.

아래는 cctv_frame() 함수에서 카메라를 열 때 발생할 수 있는 오류를 수정하는 방법입니다.
...코드:

위 코드에서는 VideoCapture() 함수를 호출할 때 인덱스를 0으로 설정하여 기본 카메라를 열도록 수정했습니다. 만약 여러 개의 카메라가 연결되어 있고 다른 카메라를 사용하려면, 적절한 인덱스를 사용하십시오.

---- 6교시
# CCTV 프레임 페이지 렌더링
@app.route('/cctv_frame')
def cctv_frame():
    if 'username' in session:
        username = session['username']
        return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')
    else:
        return redirect(url_for('login'))

== Local variable 'username' is assigned to but never used (pyflaskes E)

주어진 코드에서 username 변수가 할당되지만 사용되지 않는다는 경고는 사실 무시해도 되는 경고입니다. 그럼에도 불구하고 코드의 가독성을 위해 username 변수를 사용하지 않도록 수정하거나, 필요하면 실제로 활용하는 방법을 고려할 수 있습니다.

만약 변수가 필요하지 않다면 다음과 같이 코드를 수정할 수 있습니다.
...코드:
또는 만약 username 변수를 실제로 활용하고 싶다면, CCTV 프레임 페이지에서 사용자 이름을 표시할 수 있습니다. 예를 들어, HTML 템플릿으로 사용자 이름을 전달하는 방식입니다.

> cctv_frame.html 파일 수정
...코드:

> app.py 파일 수정
...코드:
이렇게 수정하면, cctv_frame 함수에서 username 변수를 사용하여 사용자 이름을 HTML 템플릿으로 전달하고, 템플릿에서 이를 표시할 수 있습니다. video_feed 엔드포인트를 사용하여 실시간 스트리밍을 처리하도록 하였습니다.


해당 오류는 OpenCV에서 카메라 인덱스를 잘못 지정했거나, 시스템에서 카메라를 인식하지 못해서 발생합니다. 이를 해결하기 위해 몇 가지 사항을 확인해 보겠습니다.

 1. 카메라 연결 확인: 외장 카메라를 사용 중이라면 올바르게 연결되었는지 확인하세요.
 2. 카메라 인덱스 확인: 기본적으로 인덱스 0은 내장 카메라를, 인덱스 1, 2 등은 추가된 외장 카메라를 가리킵니다. 카메라 인덱스를 변경해 보세요.
 3. 카메라 접근 권한 확인: 운영 체제에서 애플리케이션이 카메라에 접근할 수 있는 권한이 있는지 확인하세요.

※ 카메라 인덱스 변경 시도
카메라 인덱스를 변경하여 시도해 보세요.
...코드:
이제 generate_frames 함수를 호출할 때 다른 인덱스를 시도해 보세요.

※ Flask 앱 수정
video_feed 엔드포인트에서 카메라 인덱스를 인자로 전달할 수 있도록 수정합니다.
...코드:

※※※ 전체 코드
수정된 전체 코드를 아래와 같이 정리했습니다.
...코드:

위 코드에서는 generate_frames 함수에서 카메라 인덱스를 인자로 받아 이를 사용하도록 했습니다. 
 카메라 인덱스가 올바른지 확인하고, 필요하면 다른 인덱스를 사용하여 시도해보세요.

또 다시 오류...>>
[ERROR:0@9.883] global obsensor_uvc_stream_channel.cpp:159 cv::obsensor::getStreamChannelGroup Camera index out of range
Error: Unable to open camera with index 0.

이 오류 메시지는 OpenCV가 카메라를 인식하지 못하거나 카메라 인덱스가 잘못된 경우에 발생합니다. 이 문제를 해결하기 위해 다음 단계를 시도해 볼 수 있습니다.

 1. 카메라 인덱스 확인: 여러 카메라가 연결되어 있을 경우 카메라 인덱스를 변경하여 시도해 보세요.
 2. 카메라 접근 권한 확인: 운영 체제에서 애플리케이션이 카메라에 접근할 수 있는 권한이 있는지 확인하세요.
 3. 카메라 연결 확인: 카메라가 올바르게 연결되었는지 확인하세요. 외장 카메라를 사용 중이라면 USB 포트를 다시 연결해 보세요.
 4. 다른 애플리케이션과의 충돌 확인: 카메라를 다른 애플리케이션에서 사용 중인지 확인하고, 다른 애플리케이션이 카메라를 사용하는 경우 종료하세요.
 5. OpenCV 테스트: 단순한 OpenCV 스크립트를 사용하여 카메라가 정상적으로 작동하는지 테스트해 보세요.

먼저 단순한 OpenCV 스크립트를 사용하여 카메라가 정상적으로 작동하는지 테스트해 보겠습니다.
...코드:
위 코드를 사용하여 카메라가 정상적으로 작동하는 인덱스를 찾을 수 있습니다. 이 코드를 실행하고, 카메라 인덱스를 0에서 4까지 시도해보세요. 정상적으로 작동하는 인덱스를 찾으면 그 인덱스를 generate_frames 함수에 사용하세요.

※ Flask 코드 수정
카메라 인덱스 0에서 작동하지 않는 경우, 다른 인덱스를 사용하도록 generate_frames 함수를 수정합니다.
...코드:
위 코드에서 generate_frames 함수가 인덱스 1로 카메라를 열도록 변경하였습니다. 
이렇게 카메라 인덱스를 조정하면서 제대로 작동하는 인덱스를 찾을 수 있습니다. 
 만약 인덱스를 변경해도 문제가 해결되지 않는다면, 다른 문제(예: 드라이버 문제, 권한 문제)를 점검해 보아야 합니다.

---- 6교시
위 메시지를 보면 여러 카메라 인덱스를 시도했지만, 카메라를 열 수 없다는 오류가 발생했습니다. 이 문제는 여러 원인으로 인해 발생할 수 있습니다. 다음은 해결 방법을 제시합니다:

1. 카메라 드라이버 확인 및 업데이트
카메라가 제대로 인식되지 않는 경우 드라이버 문제일 수 있습니다. 장치 관리자를 열어 카메라가 제대로 설치되었는지 확인하고, 드라이버를 업데이트해 보세요.

2. 카메라 권한 확인
운영 체제에서 애플리케이션이 카메라에 접근할 수 있는 권한이 있는지 확인합니다. 특히 Windows 10/11에서는 설정 > 개인정보 보호 > 카메라에서 앱의 카메라 사용 권한을 확인하세요.

3. 다른 애플리케이션과의 충돌
다른 애플리케이션이 카메라를 사용 중인 경우, 해당 애플리케이션을 종료한 후 다시 시도해 보세요.

4. OpenCV 설치 문제
OpenCV 설치에 문제가 있을 수 있습니다. 설치를 제거하고 다시 설치해 보세요.

5. 외장 카메라 연결 확인
외장 카메라를 사용하는 경우, USB 포트에 제대로 연결되었는지 확인합니다. 다른 포트에 연결하거나, 다른 USB 케이블을 사용해 보세요.

6. 웹캠 앱 테스트
기본 웹캠 앱(예: Windows의 카메라 앱)을 열어 카메라가 제대로 작동하는지 확인합니다. 이 앱에서 카메라가 작동하지 않는다면 하드웨어 문제일 수 있습니다.

7. 디버깅 코드 추가
테스트 코드에 카메라 연결 여부를 디버깅하는 코드를 추가해 볼 수 있습니다.
...코드:
이제 위의 단계를 하나씩 시도해 보고, 문제가 해결되지 않는 경우 추가적인 정보를 제공해 주시면 더 구체적으로 도와드리겠습니다.


---- 8교시
객체 검출 모델을 통해 실시간 비디오 피드를 생성하고, 이를 여러 카메라에서 받아와 보여주기 위해서는 video_feed 엔드포인트를 사용하여 각 비디오 피드를 처리하는 여러 개의 스트림 생성기를 구현해야 합니다. 또한, 모델을 로드하여 프레임마다 객체 검출을 수행하는 기능을 추가해야 합니다.

이 작업을 위해, generate_frames 함수에서 객체 검출 모델을 사용하도록 하고, 각각의 서브 CCTV 피드를 생성하기 위해 별도의 generate_frames_sub1, generate_frames_sub2, generate_frames_sub3 함수를 만듭니다.

1. Flask 백엔드 수정 (app.py)
...코드:
이 설정을 통해 메인 CCTV와 서브 CCTV 피드를 실시간으로 받아올 수 있으며, 객체 검출 모델을 사용하여 각 피드에 객체 검출을 적용할 수 있습니다. 서브 CCTV 피드는 클릭 시 모달 창에 표시됩니다. 필요에 따라 서브 CCTV 피드의 인덱스를 실제 사용 환경에 맞게 조정하세요.






























































