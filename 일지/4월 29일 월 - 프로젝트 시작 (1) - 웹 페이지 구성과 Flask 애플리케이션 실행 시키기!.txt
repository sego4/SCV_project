4월 29일 월 → ※ ▶ ◈ ∴ 🫡

Flask를 통해 python으로 만든 웹 페이지 HTML에 연결하기!
127.0.0.1:5000로 만들었다.


▶ 명령 프롬프트를 통해서 Flask 애플리케이션 디렉토리 "my_flask_app" 폴더를 만들었고,
	그 내용에 'templates'폴더를 만들어 그 안에 "index.html"의 빈 웹 페이지 파일을 생성하였다.
◈ Windows에서는 echo 명령어를 사용하여 파일을 생성할 수 있습니다. (명령 프롬프트)

▶ 그 다음 index.html 파일을 편집할 수 있는 텍스트 편집기를 - 파일 우클릭 → '메모장에서 편집'을 통해
	원하는 방향대로 웹 페이지를 설계하도록 구현해 두었다.


▶ 웹 페이지를 연결하려면 각각의 HTML 파일이 필요하고, 이를 연결하는 코드를 작성해야 합니다. 각각의 HTML 파일은 해당 페이지의 내용을 정의하고, 이를 템플릿으로 사용하여 Flask 애플리케이션에서 렌더링할 수 있습니다. 

??? - 그리고 Flask 라우팅을 사용하여 이러한 페이지들을 연결할 수 있습니다.

??? - 각 HTML 페이지를 템플릿으로 사용하려면 Flask 애플리케이션 디렉토리에 위치하는 
	templates 폴더에 있는 html파일을 위치시켜 코드를 통해 연결하는 것만으로도 그 기능을 제대로 수행할 수 있는건가요? 이 기능을 템플릿을 통해 html 파일로서 연결하는것을 "렌더링 한다"라고 표현하는 걸까요?!


1. login.html: 로그인 화면을 보여주는 HTML 파일 코드

2. cctv.html: CCTV 화면을 보여주는 HTML 파일 코드

3. Flask 애플리케이션 코드: Flask 애플리케이션에서 위의 두 HTML 파일을 렌더링하고, 
각각의 URL을 정의하는 코드를 작성합니다.


위의 코드는 Flask 애플리케이션에서 두 개의 HTML 파일을 렌더링하고, 각각의 URL에 대해 연결하는 예시입니다. 로그인 폼은 POST 메서드를 사용하여 정보를 전송하고, 로그인 성공 시에는 CCTV 페이지로 리다이렉트합니다. CCTV 페이지에서는 CCTV 피드를 보여줍니다.

위의 예시 코드를 참고하여 원하는 웹 페이지를 구성하고 Flask 애플리케이션에 연결해 보세요.

3.의 내용을 추가하자면~ app.py 파일에서 연동되는것이므로 Flask 애플리케이션 코드: Flask 애플리케이션에서 위의 두 HTML 파일을 렌더링하고, 각각의 URL을 정의하는 코드를 작성합니다.
app.py파일을 수정할 필요성이 있다.

▶위 코드에서 /login 라우트는 POST 메서드로 사용자의 입력을 받아옵니다.
입력된 username과 password를 확인하여 실제 로그인 처리 로직을 수행합니다. 
이 예시에서는 username이 "admin"이고 password가 "password"인 경우에만 로그인이 성공했다고 가정합니다. 로그인이 성공했을 때는 redirect('/cctv')를 사용하여 cctv.html로 리디렉션합니다.

따라서 로그인이 성공하면 사용자는 cctv.html 페이지로 이동할 것입니다.



 로그인을 성공한 후에 바로 cctv.html을 렌더링하여 화면에 표시하기 위해서는 
Flask 애플리케이션에서 로그인이 성공했을 때 리디렉션을 수행하는 코드를 수정해야 합니다. 
로그인이 성공했을 때 사용자를 cctv.html로 리디렉션하는 대신에, 로그인이 성공했을 때 
바로 cctv.html을 렌더링하도록 로직을 변경해야 합니다.


이 예제는 사용자가 아이디와 비밀번호를 입력하여 로그인하는 간단한 웹 애플리케이션을 보여줍니다.

위의 코드에서는 아래와 같은 기능이 구현되어 있습니다:

1. / 경로에 접속하면 로그인 페이지를 렌더링합니다.
2. 사용자가 로그인 폼을 제출하면 /login 경로로 POST 요청이 전송됩니다.
3. /login 경로에서는 사용자가 입력한 아이디와 비밀번호를 확인하여 로그인 여부를 판단하고, 성공 시 세션에 사용자 정보를 저장합니다.
4. 로그인에 성공하면 /home 경로로 리디렉션됩니다. 이후에는 사용자가 홈 페이지에 접근할 수 있습니다.
5. /logout 경로로 접속하면 현재 사용자의 세션 정보를 삭제하고 로그인 페이지로 리디렉션됩니다.

이 코드는 세션을 사용하여 사용자의 로그인 상태를 유지하고, 세션을 통해 사용자를 식별합니다. 로그인한 사용자만이 접근할 수 있는 /home 페이지를 구현하였으며, 로그아웃 기능도 포함하고 있습니다.










