영상 편집 자막 넣기

1- 00:00:05 ~ 00:04:03 _: Smart CCTV Project 구현.
2- 00:05:21 ~ 00:07:03 _: Yolo 모델 로드를 통해 url로 연결된 영상에서 프레임을 캡처합니다.
3- 00:07:19 ~ 00:09:11 _: 1밀리초마다 프레임을 가져와 실시간 객체 검출이 이루어집니다.
4- 00:09:17 ~ 00:12:25 _: 프레임 속도는 일반적으로 30fps 또는 그 이상이기 때문에,
5- 00:12:29 ~ 00:14:21 _: 매 프레임 마다 객체 검출이 수행되어 실시간으로 객체 검출을 구현합니다.
6- 00:17:12 ~ 00:21:00 _: 객체 검출이 되면 Logs 페이지 로그 DB에 기록이 저장됩니다.
7- 00:21:15 ~ 00:33:25 _: DB에 저장된 날짜를 데이터로 링크를 통해 검출된 영상을 다운로드 할 수 있습니다.
8- 00:34:01 ~ 00:37:17 _: 객체 검출된 대상의 쓰러지는 역동적인 움직임을 "Fight"로 검출해 내고 있고,
9- 00:38:00 ~ 00:47:00_: 대상이 완전히 쓰러지자 "swoon"으로 객체 검출을 해낸 것을 확인 할 수 있습니다.
10- 00:47:06 ~ 01:03:20 _: 객체 검출된 내용은 맨 오른쪽 Logs 페이지의 incident = "swoon"을 통해 확인 할 수 있습니다.
11- 01:04:13 ~ 01:12:00 _: 여기까지 프레임을 받아와 객체 검출을 하는데까지 일련의 과정을 보여드렸습니다.
12- 01:12:05 ~ 01:20:24 _: 다음은 객체 검출의 기술적 구현에 대하여 설명해 드리겠습니다.

다음 영상)
13- 01:21:00 ~ 01:24:29 _: 오른쪽 해당 코드는 app.py에서 구현한 frame_count입니다. 
14- 01:25:13 ~ 01:29:16 _: 이를 통해 초기 프레임 6,300개는 건너뛰고, 이후 프레임부터 검출을 수행합니다.
15- 01:30:00 ~ 01:41:00 _: 왼쪽은 제 학습 블로그이고 "8교시"에 내용을 정리해 두었습니다.
16- 01:41:15 ~ 01:48:00 _: 블로그 검색창 "별명.아이디 =sego4"라고 검색해서 찾아와 주시면 감사드립니다!
17- 01:48:24 ~ 01:53:00 _: 연속으로 150번 검출되었을 때 함수를 호출하여 데이터 처리하여 DB에 저장합니다.
18- 01:53:29 ~ 01:58:00 _: 일반적으로 영상에서 프레임 레이트는 초당 30프레임(30 FPS)입니다.
19- 01:58:18 ~ 02:02:25 _: 150번 검출은 약 5초 동안 객체가 연속적으로 검출된다는 의미입니다.
20- 02:03:00 ~ 02:06:15 _: 5초 동안 객체가 계속 검출되면 데이터베이스에 저장하는 작업이 수행됩니다. 
21- 02:06:29 ~ 02:10:00 _: 이후 60초 동안 self.printed_detection 플래그가 True로 설정되어,
22- 02:10:23 ~ 02:14:00 _: 이 시간 동안은 추가적인 저장 작업이 중복되지 않도록 합니다. 
23- 02:14:22 ~ 02:22:00 _: 60초 후에는 플래그가 False로 초기화되어, 다시 검출 횟수를 세어 150번에 도달하면 또다시 저장 작업이 수행됩니다.
24- 02:23:00 ~ 02:25:05 _: 영상 봐주셔서 감사합니다.














